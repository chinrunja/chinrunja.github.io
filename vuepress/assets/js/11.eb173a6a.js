(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{277:function(n,e,t){"use strict";t.r(e);var a=t(13),s=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"my-vim-gvim-vimrc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#my-vim-gvim-vimrc"}},[n._v("#")]),n._v(" My VIM(gVIM) "),e("code",[n._v("_vimrc")])]),n._v(" "),e("p",[n._v("Extensions:")]),n._v(" "),e("ul",[e("li",[n._v("emmet-vim")]),n._v(" "),e("li",[n._v("lightline.vim")]),n._v(" "),e("li",[n._v("nerdtree")]),n._v(" "),e("li",[n._v("oceanic-next-vim")])]),n._v(" "),e("div",{staticClass:"language-_vimrc extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('" Startup {{{\nfiletype on\nfiletype indent on\nfiletype plugin on\nfiletype plugin indent on\n" }}}\n\n" General {{{\nset nocompatible\nset noundofile\nset noswapfile\nset nobackup\nset nobomb\n\nset autochdir\nset history=1024\nset whichwrap=b,s,<,>,[,]\nset backspace=indent,eol,start whichwrap+=<,>,[,]\nset clipboard+=unnamed\nset winaltkeys=no\n" }}}\n\n" Lang & Encoding {{{\nlet $LANG = \'en_US.UTF-8\'\n\nset langmenu=zh_CN\nset encoding=utf-8\nset fileencodings=ucs-bom,utf-8,gbk2312,gbk,gb18030,cp936,utf-16,big5,euc-jp,latin1\n\nlanguage en_US\n" }}}\n\n" GUI {{{\n" colorscheme Tomorrow-Night\n\nsource $VIMRUNTIME/delmenu.vim\nsource $VIMRUNTIME/menu.vim\n\nlet &t_SI = "\\<Esc>]50;CursorShap=1\\x7"\nlet &t_SR = "\\<Esc>]50;CursorShap=2\\x7"\nlet &t_EI = "\\<Esc>]50;CursorShap=0\\x7"\n\nset ruler\nset number\nset showcmd\nset hlsearch\nset wildmenu\nset incsearch\nset smartcase\nset cursorline\nset ignorecase\nset splitbelow\nset splitright\nexec "nohlsearch"\n\nset scrolloff=5\nset lines=35 columns=140\n\nset guioptions-=T\nset guioptions-=m\nset guioptions-=L\nset guioptions-=r\nset guioptions-=b\nset guioptions-=e\n\n" set listchars=tab:▸\\ ,eol:¬,trail:·,extends:>,precedes:<\nset nolist\nset guifont=Consolas:h12:cANSI:qDRAFT\n" }}}\n\n" Format {{{\nset tw=0\nset tabstop=2\nset foldlevel=99\nset indentexpr=\nset shiftwidth=2\nset laststatus=2\nset foldmethod=indent\nset softtabstop=2\n\nset autoindent\nset smartindent\nset expandtab\n\nsyntax on\n" }}}\n\n" Keymap {{{\nlet mapleader=","\n\ninoremap jj <esc>\n\nnoremap J 5j\nnoremap K 5k\nnoremap H 7h\nnoremap L 7l\n\nnoremap <leader><cr> :nohlsearch<CR>\n\nnmap <leader>s :source $HOME/_vimrc<cr>\nnmap <leader>e :e $HOME/_vimrc<cr>\n\nmap s <nop>\nmap S :w<CR>\nmap Q :q<CR>\nmap ; :\n\nmap tk :tabnew<cr>\nmap tc :tabclose<cr>\nmap th :tabp<cr>\nmap tl :tabn<cr>\n\nmap sl :set splitright<CR>:vsplit<CR>\nmap sh :set nosplitright<CR>:vsplit<CR>\nmap sj :set splitbelow<CR>:split<CR>\nmap sk :set nosplitbelow<CR>:split<CR>\n\nmap sv <C-w>t<C-w>H\nmap sr <C-w>t<C-w>K\n\nnmap <C-j> <C-W>j\nnmap <C-k> <C-W>k\nnmap <C-h> <C-W>h\nnmap <C-l> <C-W>l\n\nnnoremap <M-j> :resize +5<cr>\nnnoremap <M-k> :resize -5<cr>\nnnoremap <M-h> :vertical resize -5<cr>\nnnoremap <M-l> :vertical resize +5<cr>\n\nnoremap - Nzz\nnoremap = nzz\n\nnoremap <leader>h ^\nnoremap <leader>l $\n\ninoremap <M-j> <Down>\ninoremap <M-k> <Up>\ninoremap <M-h> <Left>\ninoremap <M-l> <Right>\n\ninoremap <M-n> <C-n>\n\ninoremap <M-p> <Esc>a()<Esc>i\ninoremap <M-b> <Esc>a[]<Esc>i\ninoremap <M-c> <Esc>a{}<Esc>i\ninoremap <M-f> <Esc>a()<Space>{<CR>}<Esc>O<++><Esc>3ba\ninoremap <M-a> <Esc>a()<Space>=><Space>{<CR>}<Esc>O<++><Esc>4ba\n\ninoremap <C-u> <Esc>mzgUiw`za\nnnoremap vv ^vg_\n\nmap <S-Insert> "+gP\ncmap <S-Insert> <C-R>+\ncmap <C-V> <C-R>+\nimap <C-v> "+gP\nimap <C-V> "+gP\nvmap <C-c> "+y\n\nvnoremap <BS> d\nvnoremap <C-C> "+y\nvnoremap <C-Insert> "+y\n\nexe \'inoremap <script> <C-V>\' paste#paste_cmd[\'i\']\nexe \'vnoremap <script> <C-V>\' paste#paste_cmd[\'v\']\n\nmap <leader>cmd :!start<cr>\nmap <leader>ex :!start explorer %:p:h<CR>\nmap <leader>pt a<C-R>=strftime("%Y/%m/%d %a %T")<CR><Esc>\n\nmap <leader>m a<++><Esc>\nmap <leader><leader> <Esc>/<++><CR>:nohlsearch<CR>"_c4l\n\nnmap <leader>fn a<C-R>=substitute(expand("%"), "/", "\\\\", "g")<CR><Esc>\n" nmap <leader>fn :let @*=substitute(expand("%"), "/", "\\\\", "g")<CR>\nnmap <leader>fp a<C-R>=substitute(expand("%:p"), "/", "\\\\", "g")<CR><Esc>\n" nmap <leader>fp :let @*=substitute(expand("%:p"), "/", "\\\\", "g")<CR>\n\nnnoremap <C-up> :buffers<CR>\nnnoremap <C-down> :bd<CR>\nnnoremap <C-left> :bp<CR>\nnnoremap <C-right> :bn<CR>\n" }}}\n\n" Plug {{{\ncall plug#begin(\'~/vimfiles/plugged\')\n\n" ----- NerdTree ----- {{{\nPlug \'scrooloose/nerdtree\'\n\nlet NERDTreeIgnore=[\'.vscode\', \'node_modules\']\nlet NERDTreeBookmarksFile = $VIM . \'/NERDTreeBookmarks\'\n\nlet NERDTreeMinimalUI = 1\nlet NERDTreeBookmarksSort = 1\nlet NERDTreeShowBookmarks = 1\nlet NERDTreeShowLineNumbers = 0\n\nlet g:NERDTreeWinPos = \'left\'\nlet g:NERDTreeDirArrowExpandable = \'+--\'\nlet g:NERDTreeDirArrowCollapsible = \'---\'\n\nnmap <leader>n :NERDTreeToggle <cr>\n\nif exists(\'g:NERDTreeWinPos\')\n   autocmd vimenter * NERDTree D:\\front_end\nendif\n" }}}\n\n" ----- oceanic-next-vim ----- {{{\nPlug \'adrian5/oceanic-next-vim\'\n"  }}}\n\n" ----- lightline ----- {{{\nPlug \'itchyny/lightline.vim\'\n"  }}}\n\n" ----- Emmet ----- {{{\nPlug \'mattn/emmet-vim\'\n" }}}\n\ncall plug#end()\n" }}}\n\n" Colorscheme {{{\ncolorscheme oceanicnext\n\nlet g:lightline = { \'colorscheme\': \'oceanicnext\' }\n" }}}\n\n" Function {{{\n\n" Remove trailing whitespace when writing a buffer, but not for diff files\nfunction! RemoveTrailingWhitespace()\n  if &ft != "diff"\n    let b:curcol = col(".")\n    let b:curline = line(".")\n    silent! %s/\\s\\+$//\n    silent! %s/\\(\\s*\\n\\)\\+\\%$//\n    call cursor(b:curline, b:curcol)\n  endif\nendfunction\n\n" Return to last edit line\nfunction! BackToLastEditingLine()\n  if line("\'\\"") > 1 && line("\'\\"") <= line("$") |\n    exe "normal! g`\\"" |\n  endif\nendfunction\n\n" ----- Call Function ----- {{{\n\n" global\nau BufWritePre * call RemoveTrailingWhitespace()\nau BufReadPost * call BackToLastEditingLine()\n\n" filetype vim\naugroup ft_vim\n  au!\n\n  au FileType vim setlocal foldlevel=0\n  au FileType vim setlocal foldmethod=marker\naugroup END\n" }}}\n\n" }}}\n\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);